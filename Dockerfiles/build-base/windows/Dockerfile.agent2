# syntax=docker/dockerfile:1
# escape=`
ARG OS_BASE_IMAGE=mcr.microsoft.com/windows/servercore:ltsc2022
FROM ${OS_BASE_IMAGE}

ARG PCRE_VERSION=8.45
ARG OPENSSL_VERSION=1.1.1w
ARG GOLANG_VERSION=1.23.2
ARG VS_BUILDTOOLS_VERSION=17

ARG MSYSTEM=MINGW64

ARG BUILD_ARCH=x64

ARG MAJOR_VERSION=5.0
ARG ZBX_VERSION=${MAJOR_VERSION}.45

ARG MINGW_URL=https://github.com/niXman/mingw-builds-binaries/releases/download/8.5.0-rt_v10-rev0/x86_64-8.5.0-release-win32-sjlj-rt_v10-rev0.7z
ARG VS_BUILDTOOLS_URL=https://aka.ms/vs/$VS_BUILDTOOLS_VERSION/release/vs_buildtools.exe
ARG GOLANG_URL=https://go.dev/dl/go$GOLANG_VERSION.windows-amd64.zip
ARG MSYS2_URL=https://api.github.com/repos/msys2/msys2-installer/releases/latest

ARG PCRE_URL=https://downloads.sourceforge.net/project/pcre/pcre/$PCRE_VERSION/pcre-$PCRE_VERSION.zip
ARG OPENSSL_URL=https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz

ENV ZBX_VERSION=$ZBX_VERSION `
    BUILD_ARCH=$BUILD_ARCH `
    MINGW_URL=$MINGW_URL VS_BUILDTOOLS_URL=$VS_BUILDTOOLS_URL VS_BUILDTOOLS_VERSION=$VS_BUILDTOOLS_VERSION GOLANG_VERSION=$GOLANG_VERSION MSYS2_URL=$MSYS2_URL `
    PCRE_VERSION=$PCRE_VERSION OPENSSL_VERSION=$OPENSSL_VERSION `
    PCRE_URL=$PCRE_URL OPENSSL_URL=$OPENSSL_URL `
    CHERE_INVOKING=yes MSYSTEM=$MSYSTEM

LABEL org.opencontainers.image.title="Zabbix agent 2 build base for Windows" `
      org.opencontainers.image.authors="Alexey Pustovalov <alexey.pustovalov@zabbix.com>" `
      org.opencontainers.image.vendor="Zabbix SIA" `
      org.opencontainers.image.url="https://zabbix.com/" `
      org.opencontainers.image.description="Zabbix build base image contains all required packages to build Zabbix agent 2 images" `
      org.opencontainers.image.licenses="GPL v2.0" `
      org.opencontainers.image.documentation="https://www.zabbix.com/documentation/${MAJOR_VERSION}/manual/installation/containers" `
      org.opencontainers.image.version="${ZBX_VERSION}"

ADD --checksum=sha256:5b709aa45ea3b8bb73052947200ad187f651a2049158fb5bbfed329e4322a977 $PCRE_URL C:\pcre.zip
ADD --checksum=sha256:cf3098950cb4d853ad95c0841f1f9c6d3dc102dccfcacd521d93925208b76ac8 $OPENSSL_URL C:\openssl.tar.gz

SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

RUN Set-Location -Path $env:SystemDrive\.; `
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; `
    `
    $env:PATH = $env:PATH + [string]::Format(';{0}\mingw64\bin;{0}\go\bin;{0}\msys64\usr\bin;{0}\msys64\{1}\bin', $env:SystemDrive, $env:MSYSTEM.ToLower()); `
    [Environment]::SetEnvironmentVariable('PATH', $env:PATH, [EnvironmentVariableTarget]::Machine); `
    `
    $env:BUILD_OUTPUT = [string]::Format('{0}\build_output', $env:SystemDrive); `
    [Environment]::SetEnvironmentVariable('BUILD_OUTPUT', $env:BUILD_OUTPUT, [EnvironmentVariableTarget]::Machine); `
    $env:BUILD_SRC = [string]::Format('{0}\build_src', $env:SystemDrive); `
    [Environment]::SetEnvironmentVariable('BUILD_SRC', $env:BUILD_SRC, [EnvironmentVariableTarget]::Machine); `
    `
    New-Item -ItemType directory -Path $env:BUILD_OUTPUT -Force | Out-Null; `
    New-Item -ItemType directory -Path $env:BUILD_SRC -Force | Out-Null; `
    `
    Write-Host ('Downloading {0} ...' -f $env:GOLANG_URL); `
    Invoke-WebRequest -OutFile $env:TEMP\go_lang.zip -Uri $env:GOLANG_URL; `
    `
    $sha256 = 'bc28fe3002cd65cec65d0e4f6000584dacb8c71bfaff8801dfb532855ca42513'; `
    $d_sha256 = (Get-FileHash $env:TEMP\go_lang.zip -Algorithm sha256).Hash; `
    Write-Host ('Verifying SHA256 ({0}) ...' -f $sha256); `
    if ($d_sha256 -ne $sha256) { `
        Write-Host ('Checksum Go Lang ({0}) failed!' -f $d_sha256); `
        exit 1; `
    }; `
    `
    Write-Host ('Downloading {0} ...' -f $env:MSYS2_URL); `
    Invoke-WebRequest -OutFile $env:TEMP\msys2.sfx.exe -Uri $(Invoke-RestMethod -UseBasicParsing $env:MSYS2_URL | `
            Select -ExpandProperty "assets" | `
            Select -ExpandProperty "browser_download_url" | `
            Select-String -Pattern '.sfx.exe$').ToString(); `
    `
    $sha256 = 'D96C53ECBFA4B9D81F6C58077965BB2E31472A8BDA4D4446EF8F45F9C601B11D'; `
    $d_sha256 = (Get-FileHash $env:TEMP\msys2.sfx.exe -Algorithm sha256).Hash; `
    Write-Host ('Verifying SHA256 ({0}) ...' -f $sha256); `
    if ($d_sha256 -ne $sha256) { `
        Write-Host ('Checksum MSYS2 ({0}) failed!' -f $d_sha256); `
#        exit 1; `
    }; `
    `
    Write-Host ('Downloading {0} ...' -f $env:MINGW_URL); `
    Invoke-WebRequest -OutFile $env:TEMP\mingw.7z -Uri $env:MINGW_URL; `
    `
    $sha256 = '55ed84e72dff790d424254c9f4b900dd7d0605ff200564258e3b88654214e440'; `
    $d_sha256 = (Get-FileHash $env:TEMP\mingw.7z -Algorithm sha256).Hash; `
    Write-Host ('Verifying SHA256 ({0}) ...' -f $sha256); `
    if ($d_sha256 -ne $sha256) { `
        Write-Host ('Checksum Mingw-w64 ({0}) failed!' -f $d_sha256); `
        exit 1; `
    }; `
    `
    Write-Host ('Downloading {0} ...' -f $env:VS_BUILDTOOLS_URL); `
    Invoke-WebRequest -OutFile $env:TEMP\vs_buildtools.exe $env:VS_BUILDTOOLS_URL; `
    `
    Write-Host 'Installing Go Lang...'; `
    Expand-Archive -Path $env:TEMP\go_lang.zip -DestinationPath $env:SystemDrive\; `
    `
    Write-Host 'Verifying install ("go version") ...'; `
    go version; `
    `
    Write-Host 'Installing MSYS2...'; `
    & $env:TEMP\msys2.sfx.exe -y -o"""$env:SystemDrive\""" | Out-Null; `
    bash -lc 'pacman --noprogressbar --noconfirm -Syuu'; `
    bash -lc 'pacman --noprogressbar --noconfirm -Syuu'; `
    bash -lc 'pacman --noprogressbar --sync --quiet --noconfirm mingw-w64-x86_64-cmake mingw-w64-x86_64-make mingw-w64-x86_64-7zip git'; `
    bash -lc 'pacman --noprogressbar --noconfirm -Scc'; `
    bash -lc 'rm -rf /usr/share/man/* /usr/share/doc/* /usr/share/locale/*'; `
    bash -lc 'rm -rf /$MSYSTEM/usr/share/man/* /$MSYSTEM/usr/share/doc/* /$MSYSTEM/usr/share/locale/*'; `
    bash -lc 'rm -rf /$MSYSTEM/share/man/* /$MSYSTEM/share/doc/* /$MSYSTEM/share/locale/*'; `
    bash -lc 'rm -rf /var/cache/pacman/pkg/*'; `
    taskkill /F /FI 'MODULES eq msys-2.0.dll' | Out-Null; `
    compact /c /i /s:$env:SystemDrive\msys64 | Out-Null; `
    `
    Write-Host 'Verifying install ("bash --version") ...'; `
    bash --version; `
    `
    Write-Host 'Installing Mingw-w64...'; `
    7z x $env:TEMP\mingw.7z; `
    compact /c /i /s:$env:SystemDrive\mingw64 | Out-Null; `
    `
    Write-Host 'Verifying install ("gcc -v") ...'; `
    gcc -v; `
    `
    Write-Host ('{0} - Visual Studio components installing...' -f $(Get-Date -format 'u')); `
    cmd /C start /w $env:TEMP\vs_buildtools.exe `
        --quiet `
        --wait `
        --norestart `
        --nocache `
        --installPath """${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools""" `
        --channelUri https://aka.ms/vs/$env:VS_BUILDTOOLS_VERSION/release/channel `
        --installChannelUri https://aka.ms/vs/$env:VS_BUILDTOOLS_VERSION/release/channel `
        --channelId VisualStudio.$env:VS_BUILDTOOLS_VERSION.Release `
        # https://docs.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-build-tools?view=vs-2022
        --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64; `
    if ($err = dir $Env:TEMP -Filter dd_setup_*_errors.log | where Length -gt 0 | Get-Content) { `
        throw $err; `
    }; `
    Wait-Process -name msiexec; `
    Write-Host ('{0} - Visual Studio components installed' -f $(Get-Date -format 'u')); `
    `
    $env:VS_PATH = &(Join-Path ${env:ProgramFiles(x86)} """\Microsoft Visual Studio\Installer\vswhere.exe""") -latest -products Microsoft.VisualStudio.Product.BuildTools -property installationPath; `
    [Environment]::SetEnvironmentVariable('VS_PATH', $env:VS_PATH, [EnvironmentVariableTarget]::Machine); `
    `
    Write-Host 'Visual Studio components installation cleanup'; `
    Get-ChildItem -Path """${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer""" -Directory -Recurse | Remove-Item -Force -Recurse; `
    `
    Write-Host 'Build environment is ready...'; `
    `
    Set-Location -Path $env:BUILD_SRC; `
    `
    Write-Host 'Extracting PCRE archive ...'; `
    Expand-Archive -Path $env:SystemDrive\pcre.zip -DestinationPath $env:BUILD_SRC; `
    Rename-Item -Path $env:BUILD_SRC\pcre-$env:PCRE_VERSION -NewName $env:BUILD_SRC\pcre; `
    `
    Write-Host 'Extracting OpenSSL archive ...'; `
    $env:SystemDirectory = [Environment]::SystemDirectory; `
    tar -zxf "$env:SystemDrive\openssl.tar.gz"; `
    Rename-Item -Path $env:BUILD_SRC\openssl-$env:OPENSSL_VERSION -NewName $env:BUILD_SRC\openssl; `
    `
    Write-Host 'Building PCRE library ...'; `
    Set-Location -Path $env:BUILD_SRC\pcre; `
    cmake --log-level=ERROR `
        -G 'MinGW Makefiles' `
        -DBUILD_SHARED_LIBS=OFF `
        -DBUILD_STATIC_LIBS=ON `
        -DPCRE_DEBUG=OFF `
        -DPCRE_BUILD_TESTS=OFF `
        -DINSTALL_MSVC_PDB=OFF `
        -DCMAKE_C_COMPILER=gcc `
        -DCMAKE_C_FLAGS='-O2 -g' `
        -DCMAKE_INSTALL_PREFIX="""$env:BUILD_OUTPUT\pcre""" . ; `
    mingw32-make -s -j"""$env:NUMBER_OF_PROCESSORS"""; `
    mingw32-make -s -j"""$env:NUMBER_OF_PROCESSORS""" install; `
    mingw32-make -s clean | Out-Null; `
    Remove-Item -Path $env:BUILD_OUTPUT\pcre\man -Force -Recurse; `
    Remove-Item -Path $env:BUILD_OUTPUT\pcre\share -Force -Recurse; `
    Write-Host 'PCRE is ready...'; `
    `
    Write-Host 'Building OpenSSL library...'; `
    Set-Location -Path $env:BUILD_SRC\openssl; `
    perl Configure `
        mingw64 `
        no-shared `
        no-ui-console `
        no-tests `
        no-unit-test `
        no-capieng `
        --api=1.1.0 `
        --libdir=lib `
        --prefix=$env:BUILD_OUTPUT/openssl `
        --openssldir=$env:BUILD_OUTPUT/openssl_ssl; `
    mingw32-make -s -j"""$env:NUMBER_OF_PROCESSORS""" build_libs; `
    mingw32-make -s -j"""$env:NUMBER_OF_PROCESSORS""" install_dev; `
    mingw32-make -s clean | Out-Null; `
    Write-Host 'OpenSSL is ready...'; `
    `
    Write-Host 'Removing downloaded...'; `
    Remove-Item -Force -Recurse $env:TEMP\*;
